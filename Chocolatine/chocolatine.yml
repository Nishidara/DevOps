name: chocolatine

on:
  push:
    branches-ignore:
     - 'ga-ignore-*'
  pull_request:
    branches-ignore:
     - 'ga-ignore-*'

env:
  MIRROR_URL:
  EXECUTABLES:

jobs:
  check_coding_style:
    name: Check for coding-style
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout style
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout style
        run: |
          check.sh $(pwd) $(pwd)
          IFS=$'\n'
          for line in $(cat coding-style-reports.log)
          do
            file_name=$(echo $line | cut --delimiter=":" --fields=1)
            error_line=$(echo $line | cut --delimiter=":" --fields=2)
            error_degree=$(echo $line | cut --delimiter=":" --fields=3)
            error_type=$(echo $line | cut --delimiter=":" --fields=4)
            echo "::error title=$error_degree coding style error: $file_name #L$error_line::$error_type"
          done
          exit 0

  check_program:
    name: Check_compilation
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout compilation
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: make
        timeout-minutes: 2

      - run: make clean

      - name: Files and executables verification
        run: |
          echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          SEARCH_BINARIES="${{ env.EXECUTABLES }}"
          IFS=$','
          for BIN in $SEARCH_BINARIES; do
              if [ ! -f "${BIN}" ]; then
                  echo "::error file=${BIN},title=Binary not found::${BIN}"
                  echo "FAIL_TASK=true" >> "$GITHUB_ENV"
              fi
              if [ ! -x "${BIN}" ]; then
                  echo "::error file=${BIN},title=Binary not executable::${BIN}"
                  echo "FAIL_TASK=true" >> "$GITHUB_ENV"
              fi
          done
      - name: Fail if needed
        if: env.FAIL_TASK == 'true'
        run: exit 0
  
  run_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [check_program]
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout tests
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Launch tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    name: Pushes_repository_to_a_given_mirror_repository
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs: [run_tests]
    steps:
      - name: Checkout mirror
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Push mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
